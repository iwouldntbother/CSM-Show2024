import argparse
from escpos.printer import Serial

parser = argparse.ArgumentParser(description='Print receipt')
parser.add_argument('-id', type=str, help='User ID', required=False)
parser.add_argument('-results', type=str, help='User Results', required=True)
parser.add_argument('-analysis', type=str, help='User analysis', required=True)

args = vars(parser.parse_args())

print("Printing: ", args)

p = Serial(devfile='/dev/ttyUSB0',
           baudrate=19200,
           bytesize=8,
           parity='N',
           stopbits=1,
           timeout=5.00,
           dsrdtr=True,
           profile='TM-T88III')


def print_separator():
    p.text('\n')
    p.text('------------------------------------------\n')
    p.text('\n')


def print_title():
    p.set(align='center')
    p.text(' _____   _____   _____ \n')
    p.text('|  _  | |     | |  _  |\n')
    p.text('|     |_| | | |_|     |\n')
    p.text('|__|__|_|_|_|_|_|__|__|\n')
    p.text('AI Morality Assessment\n')
    p.text('+-----------------------+\n')
    p.text('\n')
    p.set(align='left')


def print_paragraph(text):
    words = text.split(' ')
    line = ''
    for word in words:
        if word == '\n':
            p.text(line.strip() + '\n')
            p.text('\n')
            line = ''
        elif len(line) + len(word) <= 42:
            line += word + ' '
        else:
            p.text(line.strip() + '\n')
            line = word + ' '
    p.text(line.strip() + '\n')


def print_header(text):
    p.set(align='center', bold=True)
    p.text(text + '\n')
    p.set(align='left', bold=False)


def print_scale(text='', value=0):
    toPrint = ''
    if text:
        toPrint += text + ' '
    scale = '|--------------------|'
    position = int((value - (-4)) * (19 - 1) / (4 - (-4))) + 1
    # p.text(toPrint + scale[:position] + '+' + scale[position + 1:] + ' ' + str(value) + '\n')
    # x = value a,b = -4,4 c,d = 1,21 y = new value
    # y = (x-a)/(b-a)*(d-c)+c
    # y = (value - (-4))/(4-(-4))*(21-1)+1
    # y = (value + 4)/8*20+1
    pos = int((value + 4)/8*20+1)
    p.text(toPrint + scale[:pos] + '+' + scale[pos:] + ' ' + str(value) + '\n')


def print_footer():
    p.image('../assets/images/print_logo.png', center=True)
    p.set(align='center')
    p.text('A ')
    p.set(bold=True)
    p.text('William Westwood')
    p.set(bold=False)
    p.text(' Creation\n')
    p.text('https://williamwestwood.com/\n')


print_title()

# Introduction
print_paragraph(
    'The results bellow are a direct analysis of your moral alignment in relation to AI. The questions were designed to understand your perspective on the rights of AI and its role in society. The following analysis will provide a detailed summary of your responses and offer insights into your views on AI.')

print_separator()

print_header('Analysis')

# Analysis
print_paragraph(args['analysis'])

print_separator()

print_header('Question scores')

# Question scores
score_values = args['results'].split('|')

print_scale(text='Question 1.', value=int(score_values[0]))
print_scale(text='Question 2.', value=int(score_values[1]))
print_scale(text='Question 3.', value=int(score_values[2]))
print_scale(text='Question 4.', value=int(score_values[3]))
print_scale(text='Question 5.', value=int(score_values[4]))

# Score explanation
print_paragraph(
    '\n The ethics score is calculated based on the given pros & cons, weighted 1 & -1 respectively, with an empty response being 0. The score is then plotted on the scale above. The closer to 0, the more balanced the response.')

print_separator()

# Footer
print_footer()

print_separator()

# Disclaimer
print_paragraph(
    'The content of this printout is generated by an AI model, I am not responsible for anything. Do not take this seriously.\n')

print_separator()

p.cut()
